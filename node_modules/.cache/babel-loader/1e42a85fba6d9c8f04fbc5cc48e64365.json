{"ast":null,"code":"// constants\nimport Web3EthContract from \"web3-eth-contract\";\nimport Web3 from \"web3\"; // log\n\nimport { fetchData } from \"../data/dataActions\";\nimport { getProvider } from \"./blockchain.helpers\";\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\"\n  };\n};\n\nconst connectSuccess = payload => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload\n  };\n};\n\nconst connectFailed = payload => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload\n  };\n};\n\nconst updateAccountRequest = payload => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload\n  };\n};\n\nexport const connect = function () {\n  let providerType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"metamask\";\n  return async dispatch => {\n    dispatch(connectRequest());\n    const abiResponse = await fetch(\"/config/abi.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    });\n    const abi = await abiResponse.json();\n    const abiResponseERC20 = await fetch(\"/config/erc20abi.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    });\n    const abiERC20 = await abiResponseERC20.json();\n    const configResponse = await fetch(\"/config/config.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\"\n      }\n    });\n    const CONFIG = await configResponse.json();\n    const provider = await getProvider(providerType)(); // const { ethereum } = window;\n    // const metamaskIsInstalled = ethereum && ethereum.isMetaMask;\n\n    if (provider) {\n      Web3EthContract.setProvider(provider);\n      let web3 = new Web3(provider);\n\n      try {\n        const accounts = await provider.request({\n          method: \"eth_requestAccounts\"\n        });\n        const networkId = await provider.request({\n          method: \"net_version\"\n        });\n\n        if (networkId == CONFIG.NETWORK.ID) {\n          const SmartContractObj = new Web3EthContract(abi, CONFIG.CONTRACT_ADDRESS);\n          const SmartContractERC20Obj = new Web3EthContract(abiERC20, CONFIG.TOKEN_ADDRESS);\n          dispatch(connectSuccess({\n            account: accounts[0],\n            smartContract: SmartContractObj,\n            tokenContract: SmartContractERC20Obj,\n            web3: web3\n          })); // Add listeners start\n\n          provider.on(\"accountsChanged\", accounts => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          provider.on(\"chainChanged\", () => {\n            window.location.reload();\n          }); // Add listeners end\n        } else {\n          dispatch(connectFailed(`Change network to ${CONFIG.NETWORK.NAME}.`));\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    } else {\n      dispatch(connectFailed(\"Install Metamask.\"));\n    }\n  };\n};\nexport const updateAccount = account => {\n  return async dispatch => {\n    dispatch(updateAccountRequest({\n      account: account\n    }));\n    dispatch(fetchData(account));\n  };\n};","map":{"version":3,"names":["Web3EthContract","Web3","fetchData","getProvider","connectRequest","type","connectSuccess","payload","connectFailed","updateAccountRequest","connect","providerType","dispatch","abiResponse","fetch","headers","Accept","abi","json","abiResponseERC20","abiERC20","configResponse","CONFIG","provider","setProvider","web3","accounts","request","method","networkId","NETWORK","ID","SmartContractObj","CONTRACT_ADDRESS","SmartContractERC20Obj","TOKEN_ADDRESS","account","smartContract","tokenContract","on","updateAccount","window","location","reload","NAME","err"],"sources":["/Users/babarhanif/Downloads/CroLick-NFT-Dapp/src/redux/blockchain/blockchainActions.js"],"sourcesContent":["// constants\nimport Web3EthContract from \"web3-eth-contract\";\nimport Web3 from \"web3\";\n// log\nimport { fetchData } from \"../data/dataActions\";\nimport { getProvider } from \"./blockchain.helpers\";\n\nconst connectRequest = () => {\n  return {\n    type: \"CONNECTION_REQUEST\",\n  };\n};\n\nconst connectSuccess = (payload) => {\n  return {\n    type: \"CONNECTION_SUCCESS\",\n    payload: payload,\n  };\n};\n\nconst connectFailed = (payload) => {\n  return {\n    type: \"CONNECTION_FAILED\",\n    payload: payload,\n  };\n};\n\nconst updateAccountRequest = (payload) => {\n  return {\n    type: \"UPDATE_ACCOUNT\",\n    payload: payload,\n  };\n};\n\nexport const connect = (providerType = \"metamask\") => {\n  return async (dispatch) => {\n    dispatch(connectRequest());\n    const abiResponse = await fetch(\"/config/abi.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n    const abi = await abiResponse.json();\n\n    const abiResponseERC20 = await fetch(\"/config/erc20abi.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n    const abiERC20 = await abiResponseERC20.json();\n    const configResponse = await fetch(\"/config/config.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    });\n    const CONFIG = await configResponse.json();\n\n    const provider = await getProvider(providerType)();\n    // const { ethereum } = window;\n    // const metamaskIsInstalled = ethereum && ethereum.isMetaMask;\n    if (provider) {\n      Web3EthContract.setProvider(provider);\n      let web3 = new Web3(provider);\n      try {\n        const accounts = await provider.request({\n          method: \"eth_requestAccounts\",\n        });\n        const networkId = await provider.request({\n          method: \"net_version\",\n        });\n        if (networkId == CONFIG.NETWORK.ID) {\n          const SmartContractObj = new Web3EthContract(\n            abi,\n            CONFIG.CONTRACT_ADDRESS\n          );\n          const SmartContractERC20Obj = new Web3EthContract(\n            abiERC20,\n            CONFIG.TOKEN_ADDRESS\n          );\n          dispatch(\n            connectSuccess({\n              account: accounts[0],\n              smartContract: SmartContractObj,\n              tokenContract: SmartContractERC20Obj,\n              web3: web3,\n            })\n          );\n          // Add listeners start\n          provider.on(\"accountsChanged\", (accounts) => {\n            dispatch(updateAccount(accounts[0]));\n          });\n          provider.on(\"chainChanged\", () => {\n            window.location.reload();\n          });\n          // Add listeners end\n        } else {\n          dispatch(connectFailed(`Change network to ${CONFIG.NETWORK.NAME}.`));\n        }\n      } catch (err) {\n        dispatch(connectFailed(\"Something went wrong.\"));\n      }\n    } else {\n      dispatch(connectFailed(\"Install Metamask.\"));\n    }\n  };\n};\n\nexport const updateAccount = (account) => {\n  return async (dispatch) => {\n    dispatch(updateAccountRequest({ account: account }));\n    dispatch(fetchData(account));\n  };\n};\n"],"mappings":"AAAA;AACA,OAAOA,eAAP,MAA4B,mBAA5B;AACA,OAAOC,IAAP,MAAiB,MAAjB,C,CACA;;AACA,SAASC,SAAT,QAA0B,qBAA1B;AACA,SAASC,WAAT,QAA4B,sBAA5B;;AAEA,MAAMC,cAAc,GAAG,MAAM;EAC3B,OAAO;IACLC,IAAI,EAAE;EADD,CAAP;AAGD,CAJD;;AAMA,MAAMC,cAAc,GAAIC,OAAD,IAAa;EAClC,OAAO;IACLF,IAAI,EAAE,oBADD;IAELE,OAAO,EAAEA;EAFJ,CAAP;AAID,CALD;;AAOA,MAAMC,aAAa,GAAID,OAAD,IAAa;EACjC,OAAO;IACLF,IAAI,EAAE,mBADD;IAELE,OAAO,EAAEA;EAFJ,CAAP;AAID,CALD;;AAOA,MAAME,oBAAoB,GAAIF,OAAD,IAAa;EACxC,OAAO;IACLF,IAAI,EAAE,gBADD;IAELE,OAAO,EAAEA;EAFJ,CAAP;AAID,CALD;;AAOA,OAAO,MAAMG,OAAO,GAAG,YAA+B;EAAA,IAA9BC,YAA8B,uEAAf,UAAe;EACpD,OAAO,MAAOC,QAAP,IAAoB;IACzBA,QAAQ,CAACR,cAAc,EAAf,CAAR;IACA,MAAMS,WAAW,GAAG,MAAMC,KAAK,CAAC,kBAAD,EAAqB;MAClDC,OAAO,EAAE;QACP,gBAAgB,kBADT;QAEPC,MAAM,EAAE;MAFD;IADyC,CAArB,CAA/B;IAMA,MAAMC,GAAG,GAAG,MAAMJ,WAAW,CAACK,IAAZ,EAAlB;IAEA,MAAMC,gBAAgB,GAAG,MAAML,KAAK,CAAC,uBAAD,EAA0B;MAC5DC,OAAO,EAAE;QACP,gBAAgB,kBADT;QAEPC,MAAM,EAAE;MAFD;IADmD,CAA1B,CAApC;IAMA,MAAMI,QAAQ,GAAG,MAAMD,gBAAgB,CAACD,IAAjB,EAAvB;IACA,MAAMG,cAAc,GAAG,MAAMP,KAAK,CAAC,qBAAD,EAAwB;MACxDC,OAAO,EAAE;QACP,gBAAgB,kBADT;QAEPC,MAAM,EAAE;MAFD;IAD+C,CAAxB,CAAlC;IAMA,MAAMM,MAAM,GAAG,MAAMD,cAAc,CAACH,IAAf,EAArB;IAEA,MAAMK,QAAQ,GAAG,MAAMpB,WAAW,CAACQ,YAAD,CAAX,EAAvB,CAzByB,CA0BzB;IACA;;IACA,IAAIY,QAAJ,EAAc;MACZvB,eAAe,CAACwB,WAAhB,CAA4BD,QAA5B;MACA,IAAIE,IAAI,GAAG,IAAIxB,IAAJ,CAASsB,QAAT,CAAX;;MACA,IAAI;QACF,MAAMG,QAAQ,GAAG,MAAMH,QAAQ,CAACI,OAAT,CAAiB;UACtCC,MAAM,EAAE;QAD8B,CAAjB,CAAvB;QAGA,MAAMC,SAAS,GAAG,MAAMN,QAAQ,CAACI,OAAT,CAAiB;UACvCC,MAAM,EAAE;QAD+B,CAAjB,CAAxB;;QAGA,IAAIC,SAAS,IAAIP,MAAM,CAACQ,OAAP,CAAeC,EAAhC,EAAoC;UAClC,MAAMC,gBAAgB,GAAG,IAAIhC,eAAJ,CACvBiB,GADuB,EAEvBK,MAAM,CAACW,gBAFgB,CAAzB;UAIA,MAAMC,qBAAqB,GAAG,IAAIlC,eAAJ,CAC5BoB,QAD4B,EAE5BE,MAAM,CAACa,aAFqB,CAA9B;UAIAvB,QAAQ,CACNN,cAAc,CAAC;YACb8B,OAAO,EAAEV,QAAQ,CAAC,CAAD,CADJ;YAEbW,aAAa,EAAEL,gBAFF;YAGbM,aAAa,EAAEJ,qBAHF;YAIbT,IAAI,EAAEA;UAJO,CAAD,CADR,CAAR,CATkC,CAiBlC;;UACAF,QAAQ,CAACgB,EAAT,CAAY,iBAAZ,EAAgCb,QAAD,IAAc;YAC3Cd,QAAQ,CAAC4B,aAAa,CAACd,QAAQ,CAAC,CAAD,CAAT,CAAd,CAAR;UACD,CAFD;UAGAH,QAAQ,CAACgB,EAAT,CAAY,cAAZ,EAA4B,MAAM;YAChCE,MAAM,CAACC,QAAP,CAAgBC,MAAhB;UACD,CAFD,EArBkC,CAwBlC;QACD,CAzBD,MAyBO;UACL/B,QAAQ,CAACJ,aAAa,CAAE,qBAAoBc,MAAM,CAACQ,OAAP,CAAec,IAAK,GAA1C,CAAd,CAAR;QACD;MACF,CAnCD,CAmCE,OAAOC,GAAP,EAAY;QACZjC,QAAQ,CAACJ,aAAa,CAAC,uBAAD,CAAd,CAAR;MACD;IACF,CAzCD,MAyCO;MACLI,QAAQ,CAACJ,aAAa,CAAC,mBAAD,CAAd,CAAR;IACD;EACF,CAxED;AAyED,CA1EM;AA4EP,OAAO,MAAMgC,aAAa,GAAIJ,OAAD,IAAa;EACxC,OAAO,MAAOxB,QAAP,IAAoB;IACzBA,QAAQ,CAACH,oBAAoB,CAAC;MAAE2B,OAAO,EAAEA;IAAX,CAAD,CAArB,CAAR;IACAxB,QAAQ,CAACV,SAAS,CAACkC,OAAD,CAAV,CAAR;EACD,CAHD;AAID,CALM"},"metadata":{},"sourceType":"module"}